// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// db/drop_all_tables.sql
// db/migrations/0001_initial.sql
package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x8e\x85\x30\x0c\x43\xf7\x9c\xa2\xf7\xe0\x30\x91\x09\x19\x88\x28\x6d\xd5\x04\x34\xdc\x7e\x24\xc4\x6c\xbe\xbe\x14\xf6\x2f\xb6\x63\xcf\xbd\xb6\xe4\x98\xb2\x24\xfd\x49\xf2\xab\xe6\x96\x5c\xb0\x27\x86\x31\x66\x19\x87\xaf\xc8\x61\xd2\x2d\x60\xd0\x5a\x56\x86\x6b\x2d\x01\xd9\xc0\x1b\x16\x09\x28\xae\x5d\xaa\x11\xf8\x85\x22\xaf\x28\x45\x72\x40\x2d\xbd\x1e\x2d\x7a\x43\x8b\x39\x0a\x47\xe9\xfe\x31\x32\x87\x1f\x6f\x45\xe9\x7d\x49\x1f\x06\xb4\xaa\x79\xed\x57\x70\x25\xa7\x14\x27\xbf\x5a\x94\xff\x06\xa3\x45\xd9\xf5\x54\x8f\x3c\x9f\x39\xe9\x19\x81\xa6\x0c\xde\xb2\x5a\x24\x3f\xc3\x31\xc1\x84\x76\x5d\xfa\x5d\x89\x8d\xc3\x5f\x00\x00\x00\xff\xff\xda\x81\x6e\xb2\xa2\x02\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 674, mode: os.FileMode(436), modTime: time.Unix(1554110991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\xdb\x72\xdb\x38\xd2\xbe\x8e\x9f\x02\xb5\x7b\xa1\xb8\x22\xd8\x00\x08\x92\x80\xe7\xdf\xad\x4a\x9c\xc9\x61\x26\xc9\x26\x93\x64\x52\xd9\x1b\x15\x08\x34\x25\xc6\x14\xa9\x21\x28\xf9\xf0\xf4\x7f\x91\x22\x29\xea\x68\x4a\x76\x12\xef\xd4\xd4\xb8\x14\xb1\x1b\xe8\xfe\xfa\x80\x6e\x00\x14\xc6\xe8\xc9\x38\x1a\x66\x2a\x07\xf4\x79\x72\x74\x84\x31\x3a\x4f\x33\xf8\x23\x8d\x63\xc8\x90\xd5\x23\x18\xab\xa3\x23\x15\xe7\x90\x21\xa3\x72\x15\x28\x0b\x48\xa7\x19\x64\x15\x05\xe4\x28\x8f\xc6\x70\x93\x26\x80\xfe\x85\x7a\xd3\x5c\xf7\x7e\x39\x3a\xd2\x19\x14\x23\xc2\x55\x0e\x89\x8d\xd2\x04\x45\x21\x4a\xd2\x1c\xc1\x55\x64\x73\x8b\xfe\x31\x9d\x46\x06\xa7\xd6\x4e\xfe\xb1\x20\xce\x55\x10\x03\xca\x41\x8d\xd1\xe3\xa3\x47\x91\x41\x05\x11\x9a\x64\xd1\x58\x65\xd7\xe8\x02\xae\x91\x81\x50\x4d\xe3\xbc\x7c\x30\x18\x42\x02\x85\xd8\x83\x19\x7f\x7c\xdc\x3f\x7a\x94\xa8\x31\xa0\x99\xca\xf4\x48\x65\x8f\x99\x7b\x5c\xce\x97\x4c\xe3\x18\xe9\x11\xe8\x0b\xf4\xb8\x24\xf8\xbf\x7f\xa3\x5e\xef\x18\x4d\x93\xe8\xaf\x29\xf4\x8f\x1e\xcd\xe7\x36\x83\xdc\x96\x6a\xd8\x5c\x8d\x27\xf9\x4d\x33\x93\x9e\x66\x19\x24\xf9\xa0\x79\xd6\x8c\x7a\x74\xbc\x2a\xf9\xd4\x42\x66\x0f\x12\xbd\xe0\xbc\x55\xfc\x86\x68\x55\x05\x0b\x3a\x83\xbc\xe1\x75\xc9\x3a\x6f\x45\x32\xe7\xbc\x8b\xd6\xfd\xa3\x47\x85\x81\x06\xb5\x8a\xcd\x44\x19\x84\x90\x41\xa2\xc1\x56\x16\x8c\xcc\x31\x4a\x13\x64\x20\x86\x1c\x90\x56\x56\x2b\x03\x6d\xd0\xa2\xc4\xc0\x55\x41\x52\xe1\x56\x8d\xbb\x06\xab\x9a\x4c\xe2\x48\xab\xbc\xf0\xa2\x3b\xfb\xc5\x26\x70\x5a\xa0\xf6\x8f\x1e\x19\xb0\x3a\x8b\x26\xe5\x74\x39\x5c\xe5\x3f\x11\xad\xc2\x33\x4a\x23\x37\xe0\xf4\x51\x21\xec\xf1\xba\xef\x4d\x94\xbe\x50\x43\x38\x08\xa0\xfc\x7a\x52\x58\x23\x5f\x03\xa6\x7c\xf0\x6f\x44\x0a\xa2\x19\x64\x65\x1c\x2f\x3c\x74\x83\x8b\xd6\x44\x0d\x98\xd3\x2c\x6e\x71\x78\x1b\x9c\x3a\x8b\x17\xd4\x61\x14\xc3\x92\xb5\x28\x21\x5b\x4c\x62\xa3\x9b\x56\xb4\x94\x54\x23\x65\x47\xcd\x57\x1e\xbf\xab\x9b\xb7\xdc\x6e\xa7\xfd\x96\xdc\x73\xb7\x19\x1f\x2f\x8f\xd9\x47\x15\x5e\x1b\xec\x59\x64\xd8\xd4\x0e\x94\x3e\xd8\xed\x61\x06\x49\xde\x86\xa8\x21\xef\x4d\x52\x9b\x47\x89\xcd\x55\x1c\xf7\xfa\xe8\xe8\x91\x1e\x65\xe9\xb8\x98\x6e\xa3\x91\x1b\xb6\x92\xd6\x8e\x14\x73\xbd\x15\x9c\x13\x00\x63\x07\xca\x8c\xa3\x04\x05\x69\x1a\x83\x4a\x1a\xb6\x50\xc5\xb6\x80\x20\xb2\x03\x03\x71\xae\xb6\x12\x98\xc8\x16\xaa\x0f\x26\xea\x3a\x4e\x95\x19\x04\x4a\x5f\xa4\x61\xb8\x46\x9f\x67\x65\xd6\x1b\x43\xae\x8a\x05\x69\x60\xa3\x61\xa2\xf2\x69\x06\x83\xcc\xaa\x65\x6f\x6b\x89\xbe\xc4\x70\xb3\xec\x62\xcb\x74\x06\x94\x89\xa3\x64\x17\xc9\x5d\xfc\xaa\x8a\xd4\x9d\x3e\xd5\x44\x73\xf7\x24\xba\xe2\x30\x8b\x59\xd6\x5d\x6b\xa4\x92\x04\xe2\xef\xbe\xc6\x16\x38\xa5\x71\x9a\x6d\xa4\x7f\x48\xc1\xb9\x6a\x91\xdb\x0d\x51\x14\x3d\x95\x24\x75\x82\x5e\x0d\xed\xb5\x3c\xbd\xb0\x54\x8d\xff\x0e\x1b\x0d\xb3\x74\x3a\x39\xac\x96\xb8\xe3\x72\xd7\x46\xb9\x28\xf1\xd2\x69\x3e\x88\x92\xc1\x24\x4b\x87\x19\x58\xbb\x39\x7a\x97\xfc\x3b\x8d\x23\x7d\x3d\x98\x4e\x8c\xca\xc1\x0e\x20\x29\x14\x32\x1b\xa3\x78\x03\x9b\x55\x21\x0c\xc6\xa9\x81\xae\x0c\x69\x18\x46\x1a\x06\xa3\x74\x9a\x75\x17\xae\x29\x58\x6b\x9c\x78\xb9\x82\x54\x4f\x27\x90\x45\xa9\x19\x44\x49\x0e\xd9\x4c\xc5\x4b\x39\x74\x15\xcc\x2d\x2c\x0d\xbc\xd5\xf3\xb1\xba\x6a\x10\x99\x40\x56\xd1\x17\x8b\x2e\x0c\x21\xdb\x36\xea\x16\xae\x6a\x45\x5e\x02\xba\x54\x29\x9d\xe6\x5d\x84\x5d\xe1\xb8\x97\xa2\xf0\x5e\x03\xb2\x8a\x90\x4d\x01\xd9\x04\xcf\x3d\x06\x64\x1d\x6c\x8b\x69\xd7\xe2\xb1\x5c\x2d\x13\x5d\xd7\x57\xed\xf0\x6a\x07\x66\x85\x73\x64\x16\xa0\x46\x13\x14\x25\xb0\x14\x56\xa3\xd4\xe6\x6b\x51\xda\xac\x2f\xd3\x24\x03\x9b\xc6\xb3\x62\xde\x3b\xad\x35\xeb\x45\x45\xad\xc5\xc0\xe6\x2a\x9f\xd6\xe9\xc5\x42\x16\xa9\xb8\xad\xc7\x5a\xa2\x27\xcb\x89\x7b\x57\x56\x8f\x74\xbb\x7e\x68\x31\xee\x10\x67\xa5\xc2\x3f\xac\xd4\xbc\x8b\xf7\x56\x78\x54\xe1\xd8\x3f\x7a\x14\x2b\x9b\x0f\xca\x99\x06\x61\x9a\xd5\x41\xb8\xff\xc0\xe5\x38\x55\xbc\x0d\x33\x95\xac\x0b\xb8\x42\xb4\x51\xf7\x4a\xe5\x4d\x74\x8b\x4a\x7b\xfe\xfd\x5e\xa9\xba\x31\xc0\x8a\x4b\x6f\x0a\xdc\x45\x04\x6c\x8b\xda\x7b\x4d\x01\x65\x4c\x6e\x4a\x00\x75\xb0\x6e\x8d\xff\x76\x3c\x3e\x6e\x69\xd8\x47\xcb\x02\x6e\xce\x05\x9b\x7d\xb2\x35\xcc\xf1\x2f\x1d\x79\x56\x66\xeb\xca\x56\x2b\x7e\x5b\xf0\x0e\x46\x91\xcd\xd3\xec\x7a\x57\x10\xaf\xb9\xf5\x2e\xef\xba\xd7\x80\xfa\xfb\x78\xd6\xae\x9a\x7b\xab\x49\x3a\xfa\xcb\x2a\x5b\x77\x97\x59\xe5\xdc\xea\x35\x65\x17\x38\x28\x1b\xf9\x1d\x8e\x52\xef\x00\x2c\x15\x23\x45\x01\x08\xb6\x30\xf5\x86\x27\xed\xb2\x71\xa9\x4f\xda\x9e\xee\xe7\x0d\xe9\x0e\x29\xee\xd4\x55\x65\x30\x8b\xd2\xe9\xe6\x16\xb6\xe8\x86\xb3\x2c\xcd\x06\xba\x28\x2c\x57\x36\x17\x1e\xb0\xab\x2e\x8c\x57\x8c\xb5\x56\x2c\xb6\x86\x6b\x9b\xb9\x18\x6d\xa3\xbb\x56\x06\xd8\xed\x9c\x15\xd1\xad\xae\x58\xd1\x2d\x89\xb8\xbe\x75\xa7\xf3\x68\x16\xe5\x3b\x93\xd4\x5d\xac\xae\x63\x65\xed\x26\xf7\xb4\x30\x83\xac\x98\x78\xc3\xb3\xc3\xca\x8b\x07\x90\x83\x0e\xaa\x8c\x17\xbc\xdb\x1c\xbd\xbb\x7f\x6f\xf4\xaa\x85\x8d\x6f\xf5\x99\x05\x69\x2b\x5f\x6d\x27\x5a\xaa\xc7\xb7\x93\x2d\xfb\xf3\xc6\x6d\xd1\x41\x3d\x54\x10\x2b\x7d\x11\x47\xb6\xcc\x43\x77\xdf\x89\xd9\x60\x91\x4d\x83\xdc\x6a\x9a\xa5\x9a\x65\x21\x56\x1f\xb5\x20\x28\xc1\xc7\x18\xcd\x8f\x62\x56\xda\x12\x65\x0c\xd2\x69\x3c\x1d\x27\x68\x8f\xee\x62\x3e\xe0\xeb\x24\xca\x8b\xb0\x34\x2a\x57\xe5\x17\xcf\xeb\x8e\x1b\xd4\x18\xa9\xc4\x94\x1b\xf4\xe8\x71\xb9\xbd\x77\x5a\xfe\x3d\x3e\x8a\x12\x0b\x59\xb9\x32\xa4\xcd\x0e\x76\xd5\x63\xa1\x99\x8a\xa7\x60\xd1\xe3\x9e\x11\xd2\xe1\xcc\x68\x2c\x19\xe5\x98\x73\x6a\xb0\xe2\x2a\xc4\x81\x31\xc2\xf1\x95\x13\x30\x47\xf6\xfa\xa8\x57\x49\xd7\x3b\xfe\x65\x69\xdc\xea\x5c\xa0\x3e\xf7\xe8\xa3\xf9\x29\x46\x1f\xd5\x27\x05\x8b\x99\x4a\xa9\x8a\xa1\x44\xe0\x50\x26\x99\xe1\xbe\x2f\x5c\xc1\x34\x01\x37\x54\xd2\x53\x00\xae\x4b\x9d\x90\x96\xd3\x75\x11\xab\x42\xfb\xd7\x32\xcd\x15\xf9\xcd\x2e\xc9\xd6\x4e\xb8\xc5\xdf\x3e\x9a\xaf\x95\x7d\xd4\x5a\x19\x17\x02\x3a\x7d\x44\xfa\xa8\xf7\xba\xb6\x57\x06\x93\x34\xcb\xc1\x20\x95\xa0\x72\x69\x42\x66\x9a\x45\xc9\xb0\xf8\xf7\xbc\x92\x47\x36\x87\xc9\xc9\x2a\x24\xfb\x4f\x4b\xfb\xa8\xf7\xb9\x1c\x31\x43\x23\x65\xd1\x24\x4b\x35\x58\x5b\x4e\x6d\xe6\xd9\x0a\x4c\xed\xe6\xf7\x30\x1f\x6b\xa9\x69\xd1\x74\x32\xcc\x94\x01\x83\xf2\xb4\xce\xe4\x4d\x34\x54\x29\xf6\xae\x73\xd2\x4a\xc9\xe7\xe9\x65\x12\xa7\xca\x14\x28\xc6\x45\xb7\x96\xdf\xdb\x0c\xbc\x0d\x63\x93\x12\x54\x96\x45\x33\x30\xc8\x4e\x75\x81\x68\x38\x8d\xe3\xeb\xbb\x4e\x25\x08\x99\xcf\xf5\x7a\xbe\x3d\x5f\x0f\x7e\x82\xaa\xc9\x75\x3a\x9e\xc4\x50\xae\x2e\x45\xc9\x03\x45\x47\x89\x82\xeb\x26\x13\x9c\xd4\x8e\x7b\x9e\x66\xf0\x9f\x8f\xed\xe5\x68\x49\xae\x95\x65\x6a\x1e\xba\x4b\x42\x6d\x0a\x33\x90\x1e\x13\x54\x79\xd8\x50\x15\x62\x1e\x18\xc0\x52\x11\x85\xa5\x1f\xf8\x1e\xb8\x9e\xd1\xae\x5f\x44\xd8\x7c\xf2\xe2\xd3\x9b\x28\x99\x5e\xa1\x30\xcd\xd0\x58\x59\x1b\xcd\x8a\x56\x2d\x9b\x41\x86\x0c\x4c\xe2\xf4\x7a\x0c\x49\x6e\xf7\x89\xc9\xb6\x0e\xb5\x21\x1a\xf1\x58\xa0\xb8\x96\x82\x63\x17\x64\x80\x39\xa5\x80\x03\x5f\x3b\x38\x70\x20\xa0\x3c\xf4\x15\xf3\x8a\x04\x50\xe0\xeb\x7b\xde\x89\x73\x42\x8a\xa9\x47\x79\x3e\xb1\x67\xa7\xa7\x3a\x1d\x8f\xd3\xa4\xc8\x82\x45\x51\x5d\x44\xc3\x30\x4d\x87\x31\xa8\x49\x64\x4f\x74\x3a\x3e\x9d\x07\x26\xae\x9f\xea\x34\x03\x9c\xda\x93\x04\xf2\x53\x35\x36\x1e\xc7\x53\x9b\x9d\x56\x03\x9f\x16\x23\xcf\x19\x4e\x86\x37\xbd\x3e\x7a\xf7\xf9\xcd\x9b\x3e\xea\x51\x97\x4b\xcf\xe7\xae\x28\x9e\xc7\xfc\xf7\x4b\xff\x29\x3c\x7b\x93\xfd\xf9\xfa\xb9\xfc\x2d\x08\xaf\xdf\xa6\xbf\xc1\x33\xf7\xfa\xf7\xe1\xbf\x8a\xe7\x8c\x50\x17\x13\x89\x19\x41\x84\x9c\x51\x76\xe6\xf8\x27\x2e\x73\xa4\x53\x72\x77\x32\xc6\x6d\x90\x39\x8e\x1f\x38\xa1\x0f\x38\x0c\x99\xc4\xdc\x07\x81\x15\x71\x19\x0e\x89\x70\xb8\x61\x6e\x60\x02\xb7\x05\x19\xff\x5e\x90\xf1\x5d\x90\xb9\x84\x0a\x49\x59\xf1\x3c\xcc\x2e\x2e\xd4\x93\x67\xa7\x37\x9f\x66\xfe\x7f\xde\x7f\x19\x46\xe6\xeb\x93\x0b\xfe\x31\x79\xfe\x71\x1d\x32\xef\x8c\xba\x67\x4c\x9e\x50\x22\x98\xe7\xdd\x1b\x64\x9a\x29\xc7\x73\x28\xc3\x81\x14\x12\x73\xe2\x00\x56\x81\xeb\x63\xe2\x69\xe2\xba\xca\x07\xa5\x59\x05\x99\x20\xe2\x84\x7c\x0f\xc8\xaa\x81\xb7\x42\xe6\xfb\x3e\xf5\x39\xe5\xc5\xf3\xe0\x2f\x27\xfc\xf0\xc7\xab\xf7\xe2\xea\x99\xf3\xc7\x8b\xcf\xdf\xce\xcd\xd3\xd0\xb9\xfc\xf0\xf5\x9c\xfd\xba\xc1\xcb\x88\x3c\x23\xde\x89\x70\xa4\x14\xf2\xde\x20\xe3\x8e\x2b\x88\x90\x0c\x6b\x65\x04\xe6\x9e\x50\x58\x91\x20\xc0\x10\x48\x43\x80\x48\xd0\x8a\xd7\x90\x51\xf7\x3b\x41\x36\x1f\x78\x3b\x64\xc2\xe3\x8e\xeb\x97\x4a\x5f\xbc\xe3\x6a\x9c\xfe\xfe\xf5\xcf\xff\x7e\x7e\xc9\xbe\xa4\x1f\xcd\x87\x57\xf4\xfd\xab\xf7\x37\x99\xfb\x74\x19\x32\x17\x51\xe7\xcc\x75\xcf\x18\x39\x29\xe0\xa6\xf7\x07\x19\x13\xdc\x30\xe9\x06\xd8\xa5\x22\xc4\xdc\x78\x3e\x96\x52\x02\x96\x5c\x7a\xc2\x10\x00\x23\x49\x0d\x19\x93\xdf\x09\xb2\xf9\xc0\x5b\x21\x13\x1e\xe3\xae\x3b\xf7\x32\x16\x8f\xd2\xcf\xb3\x59\x92\x7e\x75\x5c\x39\x89\xd8\x8b\x44\x7d\x3c\xbd\xb2\xc3\x3c\x6a\x05\x26\x25\x98\x12\xc4\x9c\x33\x4a\xcf\x28\x39\x11\xcc\x95\xc2\x3d\x14\xb2\xa6\x8e\x68\x56\x27\xe2\x11\x8f\x2b\x53\x2c\x1f\x1c\x73\x49\x38\x96\xca\x03\x1c\x1a\xee\xb9\xae\x74\x0c\x0d\xca\x1c\x62\xf3\xf9\xde\x3a\xea\xfd\x93\xf2\x40\x1a\xaf\x6d\x52\x2a\x11\x71\x8b\x28\x70\xf8\x09\xf3\x28\xe3\xb4\xb3\x7c\x7d\xd4\x2d\x9d\xde\xa6\x07\x65\x22\x10\x9a\x49\xec\x12\xb7\x88\x16\xee\x60\x01\x9e\x8f\x15\x55\x04\x1c\xed\x71\xaa\x4b\x3f\x0b\x20\x57\xa5\x16\xa1\xf6\x43\xc7\xd9\xae\x05\x77\x1c\xfe\xc3\xb5\x50\xc2\x57\xc4\x29\xac\x51\xac\xc8\xdc\x57\x14\x0b\xa3\x39\x76\x5c\xe2\x07\x0a\x24\x05\x28\xa1\x55\xf1\x64\x34\x57\x83\x86\x41\x20\x76\x18\xc3\xf5\xdd\xbd\xd4\xe8\x14\x42\x2b\x6a\x54\x0d\x78\xa3\x85\x54\xcc\x40\xe0\x13\xec\xf8\x01\x60\x4e\x98\x87\x85\xeb\x84\x38\x08\x8d\xf1\x02\x87\xfb\x41\x50\x7a\xd2\xc7\xc6\xa7\x5e\xa4\x59\x51\x64\x9b\xe9\xfc\x24\x5e\xc7\x53\x9b\x43\x56\x14\x39\xf3\x8b\x0e\xf3\xfb\x0b\xd5\xdf\xea\xab\xde\xd3\xa9\xcd\x33\x15\x47\xea\xf4\xe3\xb5\x49\xe0\xba\x57\xae\x7b\x68\x1c\x25\xd3\x1c\x0a\xde\xa2\xac\xf6\x48\xeb\x8b\x2d\x18\x49\xe2\xb1\x7d\x30\xea\x14\x33\xb7\x60\xe4\x84\x40\x09\x97\x04\x1b\xe3\x3b\x98\x07\x5c\xe2\xc0\x67\x0a\x33\xa1\x34\x95\x4a\x87\xda\xe8\x62\xae\x67\x95\xbf\xbe\xcf\xd2\x71\x5a\x36\x3f\x85\xe9\x51\x06\x31\x28\x0b\xb6\x5f\x36\x09\x2a\xd7\x23\x14\x4c\x87\x16\xd9\x09\xe8\x28\x8c\x74\xf1\xf5\x75\x3a\xcd\x90\x4e\x93\x30\x1a\x4e\xb3\xb2\x6a\xed\x2d\x03\xf9\x7d\xe0\xf4\x1d\xc6\xf7\x72\xb9\x4e\xa1\x7b\x0b\x9c\x6e\x20\x28\xf1\x04\xc1\xe0\x78\x0a\x73\xe1\xcb\xa2\xd2\x50\x98\x87\x52\x48\x10\x24\x10\xb2\x0c\xff\xa7\x75\xe0\x7c\xca\x94\xbe\xb0\x4d\x7f\x65\x60\x06\x71\x3a\x29\x4a\x6b\x74\x99\x66\x17\x65\xa3\x17\xd9\x1a\x67\x83\xc2\x0c\xfe\x9a\x42\x92\xc7\xd7\x77\x74\xca\x62\xf1\x71\x3a\xa0\xc8\x25\xdd\x2b\x8b\x76\x4a\x1d\xab\xf9\x67\xe9\xfe\x4b\x03\x66\xc0\x02\xea\x01\x03\xec\xfa\xa1\xc0\xdc\xf7\x5d\x2c\x98\x1f\x62\x11\x92\x80\x52\x05\x32\x30\x65\xbc\x2c\x5f\x89\xea\x95\x45\x80\x38\x7f\x26\xf2\xb7\x40\xde\x8a\xe7\xd7\xff\x75\xff\xf8\xef\xe5\xcd\xf3\x37\xd7\x9f\xcc\xc5\xab\x6f\xff\x39\xfd\x3a\x0c\x7f\xff\x33\x61\x7f\x0c\x3f\xbf\x4d\x2f\xf4\xbf\x16\x40\x2e\xe1\xd9\xeb\xb5\xfe\xdf\x58\xcd\x3b\x8c\x89\x12\x9b\x4e\xbd\x4b\x37\x9d\x8d\xab\x98\x0e\x42\x07\x17\x8e\x84\x39\x08\x8d\x85\x00\x81\x3d\x13\x4a\x1a\x6a\xe6\x71\xed\x6d\xd1\xf9\xc3\xe7\x97\xc9\xf8\xbd\x4b\x47\x13\xff\xe6\xfa\xc9\x93\x27\xa9\x1b\x3e\x7b\x7d\xf9\x6b\xfc\x3a\xf9\xf4\x74\x6c\xfd\xd3\xe4\x5b\x72\x71\x35\xcd\x93\xd3\x0f\xaf\xf7\xd6\xb9\x29\xc7\xa9\x37\x5f\xf4\x0f\x5a\x66\x36\xab\xcc\xa4\xd4\x2e\x37\x14\x3b\x0e\xe7\x98\x2b\x90\x58\x28\xc3\xb0\xab\x3d\xc7\xb8\x9e\xf1\xf4\xbc\x4a\xd9\xa0\xf2\xc7\xf3\x99\x90\x2f\xbf\xde\x5c\xf9\xaf\xaf\x9e\x7c\x8a\xbf\xfd\x15\xbc\xb3\xc6\x4f\x13\xcf\x4d\xd3\x2f\x7f\x3d\xbb\xd1\xe7\xd9\x9b\x17\x6f\xf8\xe5\xf9\xe8\xc3\x01\x66\x9e\x97\xd3\x92\xf9\xbc\x6c\x3d\xbb\x35\x0f\xdd\x74\xf6\xb9\x30\xa1\x1b\x6a\x4c\x99\x72\x31\x37\xca\x60\xe5\x53\xc0\xdc\x73\xb5\xa6\x9e\x27\x08\x17\x5b\x74\x96\xaf\x3e\x5b\x7e\x39\x8a\x6e\xc2\xeb\x59\xc0\xc7\xc3\xf8\xc9\x17\xf5\x4e\x7d\x71\xfe\x7c\xf3\xe1\xeb\xa5\xfd\x42\x5f\xbe\x7a\xf7\xea\xb7\x77\x13\xfd\x62\xc8\xf7\xd3\xb9\x55\x0f\x0b\xe6\x32\x5e\xc6\x56\xa7\xea\xbf\x9b\xce\x52\x1b\xee\x73\xed\x62\x08\x95\x53\xa4\x07\x59\x2c\xe9\x0c\xbb\xc2\x98\x40\xb8\x0c\x8c\xd8\x66\x67\xfa\x51\xde\x7c\x38\x7f\xf3\xf2\xdb\x18\xc2\xaf\xc9\xaf\xa7\xea\x85\x9e\x9c\x7f\x7b\x43\xdf\xd9\xe1\xf4\xd5\xe8\xc3\xcb\x6f\xe4\xf3\xf9\xd8\x0d\xc9\x5b\x29\xba\xeb\xbc\x52\xd0\x4a\xea\xf8\xbe\xd8\xa7\xf6\x38\xc2\x18\x7d\x54\xe3\xc9\xca\x3d\x67\x7a\x0f\x9b\x35\x81\xc7\x5d\x41\x88\x8b\x45\xc8\x09\xe6\x1e\xf3\x71\xe0\x38\x01\x0e\xc0\x27\xca\xa7\x42\x73\x31\x2f\x5d\xd6\xa6\x2f\xbe\xfd\x6d\x6a\x73\xa4\x92\xa5\xb9\xf3\x14\xd9\x51\x7a\x89\x8a\xff\x75\x9a\xc6\xed\x37\x05\x22\x8b\xce\x8e\xef\xba\x93\x53\x2a\x37\xdf\x26\x9b\x66\x71\x1f\xd5\x17\x82\x9b\x9b\xb2\x6b\x87\xf8\xad\x65\x93\x4a\xb7\xc8\x7c\xd8\x0d\x05\xc3\x94\x82\x8b\xa5\xf1\x09\x0e\x21\x0c\x05\x95\xda\x68\x19\xf6\xfa\x88\x2f\x75\x49\xf5\x6b\x0c\x27\x69\x36\x2c\xdb\x9c\x1c\x6c\x3e\xa0\x27\xe4\xa4\xf4\xdc\xe6\x43\x27\x2c\xbf\x83\x52\x94\x79\xd2\x0f\x15\x2f\x94\x72\xee\xae\x94\x53\x2b\xe5\xfc\x4c\xa5\x04\x21\x3c\x28\x52\x81\x1b\x4a\xff\xee\x4a\xf1\x5a\x29\x7e\xa8\x52\xad\xf3\x99\x3a\xb6\xca\x3b\x4e\xab\x3a\xf4\x51\xeb\xca\x66\x2b\xd0\x42\x70\x58\xc0\x55\x61\x24\xbd\x5d\x9f\xde\x5b\x55\x74\x02\x65\xab\x43\xc8\xf9\x39\x21\x9d\xe5\x2d\xb7\x92\x3a\x80\x76\xbf\x7a\xe9\x80\x19\x00\x25\x6e\x71\xbe\x56\xef\xf3\x4f\x42\xa4\x7c\xf1\x62\x1f\xbd\x3a\x79\xf8\x2d\x15\x73\xa0\x95\xf2\x44\xa0\x6f\x09\xfd\xa2\xf1\x30\xe8\xd7\x73\x86\xa6\x16\x5f\x82\xcd\x31\xab\xbf\xad\x9a\xb5\xf9\xde\xb4\xed\xa3\xe2\x29\xd2\xa9\xb2\xf9\x0f\xee\xdb\xba\xc2\xd6\xc9\x36\xb7\xc0\xe6\x13\x9f\x33\x8f\x2b\xcc\x88\x4f\x30\x0f\x04\xc7\xd2\x03\x83\x85\x62\x9e\x34\x81\x72\x09\xa3\xab\xb0\x81\xb2\x39\xa6\xdb\x60\x2b\x9e\xfe\xed\x61\x0b\x28\x25\x82\x3a\xea\x36\x6f\xfb\xa0\xf0\x73\x98\x95\x9f\x9e\x96\x3d\x58\xbb\x31\x6b\x20\x6b\x00\x78\x88\x70\x75\xca\x6c\x2b\x70\xb5\xef\x10\xf4\x51\x34\x69\x25\x94\xfa\x51\xe9\x3f\x94\x9c\x14\xff\xad\x35\x35\x1d\xf8\x59\x8b\x7f\xad\x5a\xee\xc0\xef\xb4\xf8\x9d\x03\xf8\x79\x8b\x7f\xad\x72\xed\xc0\xef\xb6\xf8\xd7\x3a\x9c\x0e\xfc\x5e\x8b\xdf\x3b\x80\xdf\x6f\xf1\xaf\x6d\xab\x76\xe0\x17\x2d\x7e\x71\x00\xbf\x6c\xf1\xaf\xd5\x82\x5d\xfc\x87\xb4\x1d\x68\x6d\x0f\xaf\xcb\x08\x4b\x2e\xb8\xd5\x07\x97\xae\x66\x2e\x8a\xb2\xaa\x80\xaa\xae\x2d\x94\x95\x4a\xf3\xb9\xf9\x30\xdf\x24\x6f\xfe\xb9\xec\xfc\x9d\x03\xb0\xcb\xca\xf6\x03\x85\xdf\x2f\x7b\x7c\x17\xe1\xd9\xc1\xc2\x77\x2f\x7a\x1f\x20\xf2\xdd\x8b\xdb\x3e\xea\xb6\xb2\xff\x40\xe1\xdd\x9f\x2f\xfc\xe1\x6e\xe3\xfd\x7c\xe1\x69\x5b\x78\x67\x1f\xe1\xfd\x9f\x2f\x3c\x3f\x18\x79\xb1\x57\xc0\x76\x29\xcb\xee\xe6\xf3\xfe\x3e\xc2\xcb\x9f\x2f\xfc\x92\xcf\xb3\xbd\x16\xa9\xbd\x7a\xd3\xef\x23\xfd\xe1\x4e\x4f\xf7\x5b\x63\x0f\x90\xbe\xb9\x7d\x5a\x4b\xdc\x08\x91\xa4\x97\x8f\x8f\x91\x9a\xff\x28\x06\x2a\x5f\x32\x2c\x7f\x13\x03\x61\xd4\xbc\x1d\xd8\x73\x50\xf9\xbe\xe2\xfc\x08\x85\xef\xbd\x27\xd3\x35\x54\xbb\x36\x3c\x4b\xd5\xc9\xfd\x6a\xea\x35\x9a\xba\xa5\x11\xff\xbe\x9a\x52\xd6\xa8\x5a\xdd\x48\xfc\xfb\xaa\x2a\x1a\x55\xf9\xdf\xdc\x7f\x19\x6f\x54\x65\xf3\x3e\xfb\xe1\xaa\xba\xed\xed\xa0\x35\xcd\xdb\x16\xeb\x84\xc2\xc2\xde\x3f\xa1\xa4\xbb\x4d\x1b\xf7\x40\x6d\x50\x7b\x07\xe5\x01\xea\xe5\xed\xab\x97\x7c\xc8\x56\xf2\x0f\xd4\x06\xf1\x07\x6e\x26\x76\x77\xc5\x10\x25\xc8\x82\x4e\x13\xf3\x40\x75\xe4\xad\xb3\xb0\x6e\x05\x8e\xf7\x90\x7d\xd1\x3d\x54\x9d\xff\x95\x94\xd1\x5d\x31\xff\x21\xdb\xc9\x3f\x54\x9d\xff\x99\xa4\x71\x17\xcd\x7e\x64\xd6\xd8\x72\x4d\x81\xdd\xc3\x35\x05\x5f\x10\xe3\x49\x4e\xb0\x54\x5c\xcc\xaf\x21\x0a\x61\x42\x2c\xdd\x40\x79\x4e\x10\x80\xd4\xc1\xe6\x6b\x0a\xa8\xdc\x8d\x7c\x9a\xa4\xf9\x08\x32\x64\xd7\x9e\xf7\x51\x08\x10\xa3\x30\x03\x40\x79\x8a\x32\x18\xa7\x33\x40\x63\xf8\x99\xb7\x14\x20\x0c\xa8\xf0\xb4\xc4\xc6\xd5\x01\xe6\x26\x64\x58\x3a\x82\x61\xcd\x05\xa3\xc0\x8d\xd6\x3c\x68\x9d\x7d\x9f\x9d\x9e\xc6\xa9\x56\xf1\x28\xb5\xf9\x99\x20\x64\x7e\x17\xdb\xc0\x38\x1d\xcc\x68\x7d\xe9\xbb\xf9\xd0\x09\xca\xef\xa0\x54\xa0\x98\x50\x21\x17\x38\x70\x03\x89\xb9\x47\x00\x4b\xee\x29\x0c\x81\x92\xc4\xd3\xe0\x1b\x15\xee\xa1\x14\xad\x95\xa2\x87\x2a\x75\xc7\x83\x6f\xe5\x6b\xa1\xa5\xe2\xd8\x30\xe5\x60\xee\xbb\x06\x07\xe0\x71\x2c\x29\x0d\x43\x61\x3c\x90\xd2\x5f\x39\xd0\x5f\x5c\x24\xef\xea\xcf\x9d\x3c\xe1\xb6\xab\xa2\x54\x39\x4c\x29\x89\x1d\xd7\x65\x98\xcb\x50\x63\xc5\x84\xc6\x9e\xcb\x9d\x40\xeb\x90\x10\x4f\x2e\x04\x45\x18\x99\xf9\x81\xe4\xa7\x11\xd4\xef\xc8\xd9\x7c\x1a\x86\xe8\x32\x8a\x63\x14\x00\x52\xf1\xa5\xba\xb6\x68\x04\x19\xfc\xe0\x23\xc9\xae\xb0\x75\xb2\x4d\x95\xb1\x9a\x1f\x36\x7d\x9e\x5e\x26\x47\x47\x26\x4b\x27\xf5\x8b\xb3\x61\xfd\x4b\xa4\xe5\xcb\xab\xd5\x9b\xb8\xbf\x6c\x26\x99\xbf\x87\xba\x9b\xa6\x9d\x96\x76\x53\xd6\x01\xb7\x9b\x6a\xf9\xfe\xdb\x2d\xb4\x95\xb7\xef\xa6\xaa\x7c\x67\x37\x51\x73\x74\xd6\x8d\xac\xfe\x21\xa1\x8e\xd4\xdd\x41\xda\xb6\x90\xee\xe6\x6a\xbd\x6c\xd9\x81\xf0\x36\x8b\xd6\x1b\x07\x9d\xcc\xb9\xe1\x0d\xf3\x86\xef\xff\x03\x00\x00\xff\xff\x42\xae\x05\x9f\x63\x57\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 22371, mode: os.FileMode(436), modTime: time.Unix(1554117986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql":         dbDrop_all_tablesSql,
	"db/migrations/0001_initial.sql": dbMigrations0001_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"drop_all_tables.sql": &bintree{dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_initial.sql": &bintree{dbMigrations0001_initialSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
